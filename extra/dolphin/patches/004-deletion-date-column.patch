diff --git a/src/kitemviews/kfileitemlistwidget.cpp b/src/kitemviews/kfileitemlistwidget.cpp
index d28ddd2e3..255206ab6 100644
--- a/src/kitemviews/kfileitemlistwidget.cpp
+++ b/src/kitemviews/kfileitemlistwidget.cpp
@@ -80,7 +80,7 @@ QString KFileItemListWidgetInformant::roleText(const QByteArray& role,
             const KIO::filesize_t size = roleValue.value<KIO::filesize_t>();
             text = KFormat().formatByteSize(size);
         }
-    } else if (role == "modificationtime" || role == "accesstime") {
+    } else if (role == "modificationtime" || role == "accesstime" || role == "deletiondate") {
         const QDateTime dateTime = roleValue.toDateTime();
         text = QLocale().toString(dateTime, QLocale::ShortFormat);
     } else {
diff --git a/src/kitemviews/kfileitemmodel.cpp b/src/kitemviews/kfileitemmodel.cpp
index 41ddb43b4..edb36ed9b 100644
--- a/src/kitemviews/kfileitemmodel.cpp
+++ b/src/kitemviews/kfileitemmodel.cpp
@@ -326,14 +326,17 @@ QList<QPair<int, QVariant> > KFileItemModel::groups() const
         QElapsedTimer timer;
         timer.start();
 #endif
+        const auto &role = sortRole();
+        const auto &roleType = typeForRole(role);
         switch (typeForRole(sortRole())) {
         case NameRole:        m_groups = nameRoleGroups(); break;
         case SizeRole:        m_groups = sizeRoleGroups(); break;
-        case ModificationTimeRole:        m_groups = timeRoleGroups(KFileItem::ModificationTime); break;
-        case AccessTimeRole:        m_groups = timeRoleGroups(KFileItem::AccessTime); break;
+        case DeletionDateRole:
+        case ModificationTimeRole:
+        case AccessTimeRole:        m_groups = timeRoleGroups(roleType); break;
         case PermissionsRole: m_groups = permissionRoleGroups(); break;
         case RatingRole:      m_groups = ratingRoleGroups(); break;
-        default:              m_groups = genericStringRoleGroups(sortRole()); break;
+        default:              m_groups = genericStringRoleGroups(role); break;
         }
 
 #ifdef KFILEITEMMODEL_DEBUG
@@ -1321,6 +1324,7 @@ void KFileItemModel::prepareItemsForSorting(QList<ItemData*>& itemDataList)
     case GroupRole:
     case DestinationRole:
     case PathRole:
+    case DeletionDateRole:
         // These roles can be determined with retrieveData, and they have to be stored
         // in the QHash "values" for the sorting.
         foreach (ItemData* itemData, itemDataList) {
@@ -1599,6 +1603,18 @@ QHash<QByteArray, QVariant> KFileItemModel::retrieveData(const KFileItem& item,
         data.insert(sharedValue("path"), path);
     }
 
+    if (m_requestRole[DeletionDateRole] &&
+                        item.url().scheme() == QLatin1String("trash"))
+    {
+        const auto &dateTime = QDateTime::fromString(
+            item.entry().stringValue(KIO::UDSEntry::UDS_EXTRA + 1),
+            Qt::ISODate
+        );
+        if (dateTime.isValid()) {
+            data.insert(sharedValue("deletionDate"), dateTime);
+        }
+    }
+
     if (m_requestRole[IsExpandableRole] && isDir) {
         data.insert(sharedValue("isExpandable"), true);
     }
@@ -1802,6 +1818,24 @@ int KFileItemModel::sortRoleCompare(const ItemData* a, const ItemData* b, const
         break;
     }
 
+    case DeletionDateRole: {
+        Q_ASSERT(a->values.find("deletionDate") != a->values.end());
+        Q_ASSERT(b->values.find("deletionDate") != a->values.end());
+        const QDateTime dateTimeA =
+                                a->values.value("deletionDate").toDateTime();
+        const QDateTime dateTimeB =
+                                b->values.value("deletionDate").toDateTime();
+        Q_ASSERT(dateTimeA.isValid());
+        Q_ASSERT(dateTimeB.isValid());
+
+        if (dateTimeA < dateTimeB) {
+            result = -1;
+        } else if (dateTimeA > dateTimeB) {
+            result = +1;
+        }
+        break;
+    }
+
     default: {
         const QByteArray role = roleForType(m_sortRole);
         result = QString::compare(a->values.value(role).toString(),
@@ -1958,7 +1992,24 @@ QList<QPair<int, QVariant> > KFileItemModel::sizeRoleGroups() const
     return groups;
 }
 
-QList<QPair<int, QVariant> > KFileItemModel::timeRoleGroups(KFileItem::FileTimes which) const
+QDateTime KFileItemModel::groupingDateTime(const ItemData *item,
+                                           const RoleType roleType) const
+{
+    switch (roleType) {
+    case ModificationTimeRole:
+        return item->item.time(KFileItem::ModificationTime);
+    case AccessTimeRole:
+        return item->item.time(KFileItem::AccessTime);
+    case DeletionDateRole:
+        return { item->values.value("deletionDate").toDateTime() };
+    default:
+        qWarning() << "Unknown role type:" << roleType;
+        return {};
+    }
+    Q_ASSERT(false && "never reach here");
+}
+
+QList<QPair<int, QVariant> > KFileItemModel::timeRoleGroups(RoleType const roleType) const
 {
     Q_ASSERT(!m_itemData.isEmpty());
 
@@ -1974,7 +2025,8 @@ QList<QPair<int, QVariant> > KFileItemModel::timeRoleGroups(KFileItem::FileTimes
             continue;
         }
 
-        const QDateTime fileTime = m_itemData.at(i)->item.time(which);
+        const QDateTime fileTime =
+                            groupingDateTime(m_itemData.at(i), roleType);
         const QDate fileDate = fileTime.date();
         if (fileDate == previousFileDate) {
             // The current item is in the same group as the previous item
@@ -2258,6 +2310,7 @@ const KFileItemModel::RoleInfoMap* KFileItemModel::rolesInfoMap(int& count)
         { "permissions", PermissionsRole, I18N_NOOP2_NOSTRIP("@label", "Permissions"),      I18N_NOOP2_NOSTRIP("@label", "Other"),    false, false },
         { "owner",       OwnerRole,       I18N_NOOP2_NOSTRIP("@label", "Owner"),            I18N_NOOP2_NOSTRIP("@label", "Other"),    false, false },
         { "group",       GroupRole,       I18N_NOOP2_NOSTRIP("@label", "User Group"),       I18N_NOOP2_NOSTRIP("@label", "Other"),    false, false },
+        { "deletionDate", DeletionDateRole, I18N_NOOP2_NOSTRIP("@label", "Deletion Date"),  I18N_NOOP2_NOSTRIP("@label", "Other"),    false, false },
     };
 
     count = sizeof(rolesInfoMap) / sizeof(RoleInfoMap);
diff --git a/src/kitemviews/kfileitemmodel.h b/src/kitemviews/kfileitemmodel.h
index 9814ae55d..d431944d3 100644
--- a/src/kitemviews/kfileitemmodel.h
+++ b/src/kitemviews/kfileitemmodel.h
@@ -29,6 +29,7 @@
 #include <QCollator>
 #include <QHash>
 #include <QSet>
+#include <QDateTime>
 
 class KFileItemModelDirLister;
 class QTimer;
@@ -281,7 +282,7 @@ private:
     enum RoleType {
         // User visible roles:
         NoRole, NameRole, SizeRole, ModificationTimeRole, AccessTimeRole, PermissionsRole, OwnerRole,
-        GroupRole, TypeRole, DestinationRole, PathRole,
+        GroupRole, TypeRole, DestinationRole, PathRole, DeletionDateRole,
         // User visible roles available with Baloo:
         CommentRole, TagsRole, RatingRole, ImageSizeRole, OrientationRole,
         WordCountRole, TitleRole, LineCountRole, ArtistRole, AlbumRole, DurationRole, TrackRole,
@@ -383,7 +384,7 @@ private:
 
     QList<QPair<int, QVariant> > nameRoleGroups() const;
     QList<QPair<int, QVariant> > sizeRoleGroups() const;
-    QList<QPair<int, QVariant> > timeRoleGroups(KFileItem::FileTimes which) const;
+    QList<QPair<int, QVariant> > timeRoleGroups(RoleType const) const;
     QList<QPair<int, QVariant> > permissionRoleGroups() const;
     QList<QPair<int, QVariant> > ratingRoleGroups() const;
     QList<QPair<int, QVariant> > genericStringRoleGroups(const QByteArray& typeForRole) const;
@@ -458,6 +459,11 @@ private:
      */
     bool isConsistent() const;
 
+    /**
+     * @return specified item's datetime object for given role type.
+     */
+    QDateTime groupingDateTime(const ItemData *, const RoleType) const;
+
 private:
     KFileItemModelDirLister* m_dirLister;
 
